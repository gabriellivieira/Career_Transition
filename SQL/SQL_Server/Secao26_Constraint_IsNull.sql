/* CONECTANDO A UM BANCO */

USE EMPRESA 
GO

/* CRIAÇÃO DE TABELAS */

CREATE TABLE ALUNO (
	IDALUNO INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(30) NOT NULL,
	SEXO CHAR(1) NOT NULL,
	NESCIMENTO DATE NOT NULL,
	EMAIL VARCHAR(30) UNIQUE
)
GO

/* CONSTRAINTS */

ALTER TABLE ALUNO
ADD CONSTRAINT CK_SEXO CHECK (SEXO IN('M', 'F'))
GO



/* DEFININDO RELACIONANDO 1 x 1 COM A TABELA ENDERECO*/

CREATE TABLE ENDERECO (
	IDENDERECO INT PRIMARY KEY IDENTITY,
	BAIRRO VARCHAR(20),
	UF CHAR(2) NOT NULL
	CHECK (UF IN('RJ','SP','MG')),
	ID_ALUNO INT UNIQUE
)
GO

-- Criando FK 

ALTER TABLE ENDERECO ADD CONSTRAINT FK_ENDERECO_ALUNO
FOREIGN KEY(ID_ALUNO) REFERENCES ALUNO(IDALUNO)
GO 

/* COMANDOS DE DESCRIÇÃO */

-- Pra consultar uma tabela ou ver a descrição como era feito no My SQL com os comandos
-- SHOW TABLES e DESC devemos usar uma Procedure
-- O SQL Server já possui Procedures criadas e armazenadas que fazem as tarefas
-- sabemos disso pois os comandos começam com "SP" de Storage Procedure.

--Descrição da tabela
SP_COLUMNS ALUNOS
GO

-- Descr~ição da tabela mais detalhado
SP_HELP ALUNO
GO

/* INSERINDO DADOS */

--Tabela Aluno
INSERT INTO ALUNO VALUES('ANDRE', 'M', '1981/12/09', 'ANDRE@IG.COM')
INSERT INTO ALUNO VALUES('ANA', 'F', '1982/10/07', 'ANA@IG.COM')
INSERT INTO ALUNO VALUES('RUI', 'M', '1985/08/25', 'RUI@IG.COM')
INSERT INTO ALUNO VALUES('MARIA', 'F', '1989/03/10', 'MARIA@IG.COM')
INSERT INTO ALUNO VALUES('ALISSON', 'M', '1984/03/17', 'ALISSON@IG.COM')
GO

SELECT * FROM ALUNO
GO

-- Tabela Endereco
INSERT INTO ENDERECO VALUES('FLAMENGO', 'RJ', 1)
INSERT INTO ENDERECO VALUES('MORUMBI', 'SP', 2)
INSERT INTO ENDERECO VALUES('CENTRO', 'MG', 3)
INSERT INTO ENDERECO VALUES('CENTRO', 'SP', 4)
INSERT INTO ENDERECO VALUES('CENTRO', 'RJ', 5)
GO

SELECT * FROM ENDERECO
GO

/* CRIANDO TABELA TELEFONE relacionamendo 1 X N*/

CREATE TABLE TELEFONE (
	IDTELEFONE INT PRIMARY KEY IDENTITY,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_ALUNO INT,
	CHECK (TIPO IN ('RES','COM', 'CEL'))
)
GO

INSERT INTO TELEFONE VALUES ('CEL', '78561234', 1)
INSERT INTO TELEFONE VALUES ('COM', '85269632', 1)
INSERT INTO TELEFONE VALUES ('CEL', '99981425', 2)
INSERT INTO TELEFONE VALUES ('RES', '98248569', 2)
INSERT INTO TELEFONE VALUES ('RES', '99152458', 3)
GO

SELECT * FROM TELEFONE
GO

/* PEGAR A DATA ATUAL DO SISTEMA */

SELECT GETDATE()
GO

/* CLAUSULA AMBIGUA - Quando é feito um Oin e existe a mesma coluna em mais de uma tabela */
-- Comando LEFT JOIN - Trás em evidencia o que esta a esquerda
-- No caso, vai trazer todos os alunos mesmo os que não tem telefone
--- Se estivesse com RIGHT traria todos os telefones que não tem alunos

SELECT A.NOME, T.TIPO, T.NUMERO, E.BAIRRO, E.UF
FROM ALUNO A LEFT JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO

/* IFNULL - tratar a apresentação de campos que não nulos
No SQL usamos o ISNULL
*/

SELECT  A.NOME, 
		ISNULL (T.TIPO, '********') AS "TIPO",
		ISNULL (T.NUMERO, '********') AS "NUMERO", 
		E.BAIRRO, 
		E.UF
FROM ALUNO A LEFT JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO




