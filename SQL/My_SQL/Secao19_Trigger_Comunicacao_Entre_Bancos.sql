/* COMUNICACAO ENTRE BANCOS UTILIZANDO TRIGGER */

/* A atividade consiste em usar uma trigger para manter os dois bancos sincronizados. 
 O de cadastro e o de backup.
*/

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO (
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    VALOR FLOAT(10,2)
);
SHOW TABLES;

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO (
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
    IDPRODUTO INT,
    NOME VARCHAR(30),
    VALOR FLOAT(10,2)
);

SHOW TABLES;

-- Criando trigger

USE LOJA;

-- Realizando comunicação entre bancos, insert no banco BKP_PRODUTO estando no banco Loja
INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL, 1000, 'TESTE', 0.0);

SELECT * FROM BACKUP.BKP_PRODUTO;

-- Criando Trigger para realizar essa comunicação automatica através de gatilhos

DELIMITER #

CREATE TRIGGER BACKUP_PRODUTO
BEFORE INSERT ON PRODUTO 
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP.BKP_PRODUTO VALUES
    (NULL, NEW.IDPRODUTO, NEW.NOME, NEW.VALOR);
END
#

DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL, 'LIVRO MODELAGEM', 50.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO bi', 60.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO ORACLE', 70.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO SQL', 55.00);

SELECT * FROM PRODUTO;

USE BACKUP;

SELECT * FROM BKP_PRODUTO;

-- Criando uma Trigger para quando for fazer um delete tambem.

USE LOJA;

DELIMITER #

CREATE TRIGGER BACKUP_PRODUTO_DELETE
BEFORE DELETE ON PRODUTO 
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP.BKP_PRODUTO VALUES
    (NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR);
END
#

DELIMITER ;

-- testando o delete
DELETE FROM PRODUTO  WHERE IDPRODUTO = 2;

SELECT * FROM PRODUTO;

USE BACKUP;

SELECT * FROM BKP_PRODUTO;

-- Corrigindo trigger para que no insert o Id do produto tambem vá para o backup

USE LOJA;

DROP TRIGGER BACKUP_PRODUTO;

DELIMITER #

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO 
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP.BKP_PRODUTO VALUES
    (NULL, NEW.IDPRODUTO, NEW.NOME, NEW.VALOR);
END
#

DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL, 'LIVRO JAVA', 56.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO TABLEAU', 71.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO MY SQL', 69.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO C++', 53.00);

SELECT * FROM PRODUTO;
SELECT * FROM BACKUP.BKP_PRODUTO;

/* COMPLEMENTANDO TRIGGER PARA SABERMOS QUAL FOI O EVENTO QUE FOI ACIONADO */

ALTER TABLE BACKUP.BKP_PRODUTO
ADD EVENTO CHAR(1);

DROP TRIGGER BACKUP_PRODUTO_DELETE; 


DELIMITER #

CREATE TRIGGER BACKUP_PRODUTO_DELETE
BEFORE DELETE ON PRODUTO 
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP.BKP_PRODUTO VALUES
    (NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR, 'D');
END
#

DELIMITER ;

DELETE FROM PRODUTO  WHERE IDPRODUTO = 1;

SELECT * FROM PRODUTO;
SELECT * FROM BACKUP.BKP_PRODUTO;

-- Corrigindo TRIGGER de INSERT

DROP TRIGGER BACKUP_PRODUTO;

DELIMITER #

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO 
FOR EACH ROW
BEGIN
    INSERT INTO BACKUP.BKP_PRODUTO VALUES
    (NULL, NEW.IDPRODUTO, NEW.NOME, NEW.VALOR, 'I');
END
#

DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL, 'LIVRO C#', 67.00);

SELECT * FROM PRODUTO;
SELECT * FROM BACKUP.BKP_PRODUTO;

